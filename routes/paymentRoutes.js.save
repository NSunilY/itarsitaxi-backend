// routes/paymentRoutes.js
router.post('/phonepe/create-order', async (req, res) => {
  const {
    name, mobile, email, gstNumber,
    carType, distance, duration, tollCount,
    totalFare, pickupLocation, dropLocation,
    pickupDate, pickupTime, tripType, paymentMode
  } = req.body;

  const merchantOrderId = uuidv4(); // unique ID to match PhonePe + Booking
  const advanceAmount = Math.round(totalFare * 0.25); // or however you're calculating

  try {
    const booking = new Booking({
      name,
      mobile,
      email,
      gstNumber,
      carType,
      distance,
      duration,
      tollCount,
      totalFare,
      advanceAmount,
      pickupLocation,
      dropLocation,
      pickupDate,
      pickupTime,
      tripType,
      paymentMode,
      merchantOrderId,
      paymentStatus: 'Pending'
    });

    await booking.save();

    const payload = {
      merchantId: process.env.PHONEPE_MERCHANT_ID,
      merchantTransactionId: merchantOrderId,
      merchantUserId: mobile,
      amount: advanceAmount * 100, // in paise
      redirectUrl: `${process.env.PHONEPE_REDIRECT_URL}?merchantOrderId=${merchantOrderId}`,
      redirectMode: 'POST',
      callbackUrl: `${process.env.BASE_URL}/api/payment/phonepe/callback`,
      paymentInstrument: {
        type: 'PAY_PAGE'
      }
    };

    const dataBase64 = Buffer.from(JSON.stringify(payload)).toString('base64');
    const fullURL = `${BASE_URL}/pg/v1/pay`;

    const response = await axios.post(fullURL, {
      request: dataBase64
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-VERIFY': generateXVerify(dataBase64),
        'X-CLIENT-ID': process.env.PHONEPE_CLIENT_ID
      }
    });

    res.json({
      success: true,
      token: response.data.data.instrumentResponse.redirectInfo.url,
      orderId: merchantOrderId // pass this for redirect
    });
  } catch (err) {
    console.error('‚ùå Error creating PhonePe order:', err);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

